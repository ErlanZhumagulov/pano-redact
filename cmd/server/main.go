package main

import (
	"fmt"
	"pano-redact/internal/api/handler"
	"pano-redact/internal/config"
	"pano-redact/internal/middleware"
	"pano-redact/internal/repository"
	"pano-redact/internal/service"
	"strings"

	"log"
	"net/http"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.Load()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∏
	metaFile := cfg.UploadDir + "/metadata.json"
	imageRepo := repository.NewInMemoryImageRepository(metaFile)
	imageService := service.NewImageService(imageRepo, cfg.UploadDir)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º middleware
	authMiddleware := middleware.NewAuthMiddleware(cfg.AdminUsername, cfg.AdminPassword)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º handlers
	adminHandler := handler.NewAdminHandler(cfg.StaticDir)
	apiHandler := handler.NewAPIHandler(imageService)
	drawHandler := handler.NewDrawHandler(imageService, cfg.StaticDir)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç—ã
	mux := http.NewServeMux()

	// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ (–ø—É–±–ª–∏—á–Ω–∞—è)
	mux.HandleFunc("/login", adminHandler.ShowLoginPage)

	// API –ª–æ–≥–∏–Ω
	mux.HandleFunc("/api/login", authMiddleware.Login)

	// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
	mux.HandleFunc("/admin", authMiddleware.RequireAuth(adminHandler.ShowAdminPage))

	// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ –ª–æ–≥–∏–Ω
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path == "/" {
			http.Redirect(w, r, "/login", http.StatusFound)
			return
		}
		http.NotFound(w, r)
	})

	// API endpoints (—Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
	mux.HandleFunc("/api/upload", authMiddleware.RequireAuth(apiHandler.UploadImage))
	mux.HandleFunc("/api/images", authMiddleware.RequireAuth(apiHandler.ListImages))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	mux.HandleFunc("/api/images/", func(w http.ResponseWriter, r *http.Request) {
		if strings.HasPrefix(r.URL.Path, "/api/images/") && r.Method == http.MethodDelete {
			authMiddleware.RequireAuth(apiHandler.DeleteImage)(w, r)
			return
		}
		http.NotFound(w, r)
	})

	// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
	mux.HandleFunc("/draw/", drawHandler.ShowDrawPage)

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
	mux.Handle("/uploads/", http.StripPrefix("/uploads/", http.FileServer(http.Dir(cfg.UploadDir))))

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost" + cfg.ServerPort)
	fmt.Println("üë§ –õ–æ–≥–∏–Ω:", cfg.AdminUsername)
	fmt.Println("üîë –ü–∞—Ä–æ–ª—å:", cfg.AdminPassword)
	fmt.Println("üìù –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤:", metaFile)
	fmt.Println()

	if err := http.ListenAndServe(cfg.ServerPort, mux); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}
}
